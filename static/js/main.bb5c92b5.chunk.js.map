{"version":3,"sources":["components/card/card.component.jsx","components/cardList.component.jsx","components/searchBox/card.searchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","class","src","monster","id","alt","name","email","CardList","className","monsters","map","Search","placeholder","changer","type","onChange","App","state","searchField","fetch","then","response","json","data","setState","this","fielteredSearch","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,MAAM,iBAAX,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAKL,EAAMG,QAAQG,OAC/F,6BAAKN,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCFbC,EAAW,SAAAR,GAAK,OACrB,qBAAKS,UAAU,YAAf,SACCT,EAAMU,SAASC,KAAK,SAAAR,GAAO,OAC5B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJdQ,G,MAAS,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,QAAf,OAClB,uBAAOb,MAAM,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCgC7DG,E,kDA/Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,6CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAGzC,WAAU,IAAD,OAEP,EAAgCE,KAAKR,MAA9BR,EAAP,EAAOA,SAAUS,EAAjB,EAAiBA,YACXQ,EAAkBjB,EAASkB,QAAO,SAAAzB,GAAO,OAAIA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAEnG,OACA,sBAAKpB,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAQI,YAAY,SAASC,QAAU,SAAAiB,GACrC,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAEvC,cAAC,EAAD,CAAUvB,SAAUiB,W,GA1BRO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bb5c92b5.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div class=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} alt={props.monster.name} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react'\r\nimport './card.style.css'\r\nimport { Card } from './card/card.component'\r\n\r\n\r\nexport const CardList = props => (\r\n        <div className='card-list'>\r\n        {props.monsters.map( monster => (\r\n        <Card key={monster.id} monster={monster}/>\r\n        ))} \r\n        </div>\r\n    );","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const Search = ({placeholder, changer}) => (\r\n    <input class=\"search\" type=\"search\" placeholder={placeholder} onChange={changer}\r\n      />\r\n);","import React, { Component } from 'react'\nimport './App.css';\nimport { CardList } from './components/cardList.component'\nimport { Search } from './components/searchBox/card.searchBox.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() { \n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then( response => response.json())\n    .then(data => this.setState({monsters: data}));\n  }\n\n  render() {\n    //filtering the search \n    const {monsters, searchField} = this.state;\n    const fielteredSearch = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n    return (\n    <div className=\"App\">\n      <h1> Monster Rolodex </h1>\n      <Search placeholder='search' changer={ e => {\n        this.setState({searchField: e.target.value})\n      }}/>\n      <CardList monsters={fielteredSearch} />\n    </div> \n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}